// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using th_poker_api.Data;

#nullable disable

namespace th_poker_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230614090331_purchaseData")]
    partial class purchaseData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("th_poker_api.Model.Amount.UsersAmount", b =>
                {
                    b.Property<string>("AmountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AdsCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FreeSpin")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeForAds")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float>("amount")
                        .HasColumnType("real");

                    b.HasKey("AmountID");

                    b.ToTable("UserAmount");
                });

            modelBuilder.Entity("th_poker_api.Model.Card.MDCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexCard")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MDCards");
                });

            modelBuilder.Entity("th_poker_api.Model.Friend.MDFriends", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FriendId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userCreateID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MDFriends");
                });

            modelBuilder.Entity("th_poker_api.Model.Friend.MDFriendship", b =>
                {
                    b.Property<string>("RequesterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddresseeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequesterId", "AddresseeId");

                    b.HasIndex("AddresseeId");

                    b.ToTable("MDFriendship", (string)null);
                });

            modelBuilder.Entity("th_poker_api.Model.Game.GameplayDetail", b =>
                {
                    b.Property<string>("GameplayDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("Balance")
                        .HasColumnType("real");

                    b.Property<int?>("Card1")
                        .HasColumnType("int");

                    b.Property<int?>("Card2")
                        .HasColumnType("int");

                    b.Property<int?>("Card3")
                        .HasColumnType("int");

                    b.Property<int?>("Card4")
                        .HasColumnType("int");

                    b.Property<int?>("Card5")
                        .HasColumnType("int");

                    b.Property<int?>("CardUser1")
                        .HasColumnType("int");

                    b.Property<int?>("CardUser2")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GMHeaderIdGameplayHeaderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDTSRooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("PrevBal")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WinTypeIdIdWinType")
                        .HasColumnType("int");

                    b.HasKey("GameplayDetailID");

                    b.HasIndex("GMHeaderIdGameplayHeaderID");

                    b.HasIndex("IdUserUserId");

                    b.HasIndex("WinTypeIdIdWinType");

                    b.ToTable("GameplayDetail");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.GameplayHeader", b =>
                {
                    b.Property<string>("GameplayHeaderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Card1")
                        .HasColumnType("int");

                    b.Property<int>("Card2")
                        .HasColumnType("int");

                    b.Property<int>("Card3")
                        .HasColumnType("int");

                    b.Property<int>("Card4")
                        .HasColumnType("int");

                    b.Property<int>("Card5")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdTSRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("GameplayHeaderID");

                    b.ToTable("GameplayHeader");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.MDGames", b =>
                {
                    b.Property<string>("IdMDGames")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("BuyInMax")
                        .HasColumnType("real");

                    b.Property<float>("BuyInMin")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("StakesMax")
                        .HasColumnType("real");

                    b.Property<float>("StakesMin")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("IdMDGames");

                    b.ToTable("MDGames");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.MDGameTypes", b =>
                {
                    b.Property<string>("IdMDGameType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MDGamesIdMDGames")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("IdMDGameType");

                    b.HasIndex("MDGamesIdMDGames");

                    b.ToTable("MDGameType");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.TableBet", b =>
                {
                    b.Property<string>("idTableBet")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("amt")
                        .HasColumnType("real");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("idTSRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTableBet");

                    b.ToTable("tableBets");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.WinType", b =>
                {
                    b.Property<int>("IdWinType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWinType"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("IdWinType");

                    b.ToTable("WinType");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.MDRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MDRoles");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.MDStatuses", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatus"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("IdStatus");

                    b.ToTable("MDStatuses");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.MDUsers", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LoggedIn")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ReferalJoin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("MDUsers");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.UsersLogin", b =>
                {
                    b.Property<string>("IdUsersLogin")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUsersLogin");

                    b.HasIndex("IdUserUserId");

                    b.ToTable("UsersLogin");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.UsersProfile", b =>
                {
                    b.Property<string>("IDProfile")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Profile")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("extension")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDProfile");

                    b.HasIndex("IdUserUserId");

                    b.ToTable("UsersProfile");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.UsersReferal", b =>
                {
                    b.Property<string>("ReferalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersIdUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReferalId");

                    b.HasIndex("UsersIdUserId");

                    b.ToTable("UsersReferal");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.UsersToken", b =>
                {
                    b.Property<string>("UserTokenID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdTokenFacebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdTokenGoogle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("UserTokenID");

                    b.HasIndex("IdUserUserId");

                    b.ToTable("UsersToken");
                });

            modelBuilder.Entity("th_poker_api.Model.Purchase.MDPaymentItem", b =>
                {
                    b.Property<string>("IdPymItem")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("IdPymItem");

                    b.ToTable("MDPaymentItem");

                    b.HasData(
                        new
                        {
                            IdPymItem = "749be3b1-566b-4eb8-8e3b-8ac5e443df57",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 6, 14, 16, 3, 30, 925, DateTimeKind.Local).AddTicks(3236),
                            Desc = "40B",
                            Price = 67000f,
                            Value = 4E+10f
                        },
                        new
                        {
                            IdPymItem = "c43fa0ad-5fd3-477a-9797-57f7a4b178de",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 6, 14, 16, 3, 30, 925, DateTimeKind.Local).AddTicks(3246),
                            Desc = "250B",
                            Price = 259000f,
                            Value = 2.5E+11f
                        },
                        new
                        {
                            IdPymItem = "995a034d-801c-49b1-a06e-c39fca2abb0d",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 6, 14, 16, 3, 30, 925, DateTimeKind.Local).AddTicks(3249),
                            Desc = "750B",
                            Price = 519000f,
                            Value = 7.5E+11f
                        },
                        new
                        {
                            IdPymItem = "c67a7ab1-e264-4b67-a4df-674f300e31cd",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 6, 14, 16, 3, 30, 925, DateTimeKind.Local).AddTicks(3251),
                            Desc = "1T",
                            Price = 719000f,
                            Value = 1E+12f
                        },
                        new
                        {
                            IdPymItem = "fe8c521c-b1ac-4140-97ca-c85945a07774",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 6, 14, 16, 3, 30, 925, DateTimeKind.Local).AddTicks(3261),
                            Desc = "3T",
                            Price = 1099000f,
                            Value = 3E+12f
                        },
                        new
                        {
                            IdPymItem = "9b90f32b-6fe8-4c08-936f-f0962c33f5cc",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 6, 14, 16, 3, 30, 925, DateTimeKind.Local).AddTicks(3264),
                            Desc = "6T",
                            Price = 1590000f,
                            Value = 6E+12f
                        });
                });

            modelBuilder.Entity("th_poker_api.Model.Room.MDRoomList", b =>
                {
                    b.Property<string>("IdTSRoom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("MDGamesIDIdMDGames")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxPlayer")
                        .HasColumnType("int");

                    b.Property<string>("RoomCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RoomType")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTSRoom");

                    b.HasIndex("MDGamesIDIdMDGames");

                    b.ToTable("MDRoomList");
                });

            modelBuilder.Entity("th_poker_api.Model.Transactions.TSPurchase", b =>
                {
                    b.Property<string>("IdPurchase")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("Amount_a")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdPymItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPurchase");

                    b.ToTable("TSPurchases");
                });

            modelBuilder.Entity("th_poker_api.Model.WebDashboard.Misc.Statuses", b =>
                {
                    b.Property<string>("IDStatus")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("IDStatus");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("th_poker_api.Model.WebDashboard.Purchase.PaymentHistory", b =>
                {
                    b.Property<string>("IDPayment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDPaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDPurchaseItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("IDPayment");

                    b.ToTable("PaymentHistory");
                });

            modelBuilder.Entity("th_poker_api.Model.WebDashboard.Purchase.PaymentMethod", b =>
                {
                    b.Property<string>("IDPaymentMethod")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("IDPaymentMethod");

                    b.ToTable("paymentMethods");
                });

            modelBuilder.Entity("th_poker_api.Model.WebDashboard.User.RolesDashboard", b =>
                {
                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleID");

                    b.ToTable("RolesDashboard");
                });

            modelBuilder.Entity("th_poker_api.Model.WebDashboard.User.UserLoginDashboard", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("UserLoginDashboard");
                });

            modelBuilder.Entity("th_poker_api.Model.Friend.MDFriends", b =>
                {
                    b.HasOne("th_poker_api.Model.Player.MDUsers", "userId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userId");
                });

            modelBuilder.Entity("th_poker_api.Model.Friend.MDFriendship", b =>
                {
                    b.HasOne("th_poker_api.Model.Player.MDUsers", "Addressee")
                        .WithMany("FriendshipAddressee")
                        .HasForeignKey("AddresseeId")
                        .IsRequired()
                        .HasConstraintName("FriendshipToAddressee_FK");

                    b.HasOne("th_poker_api.Model.Player.MDUsers", "Requester")
                        .WithMany("FriendshipRequester")
                        .HasForeignKey("RequesterId")
                        .IsRequired()
                        .HasConstraintName("FriendshipToRequester_FK");

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.GameplayDetail", b =>
                {
                    b.HasOne("th_poker_api.Model.Game.GameplayHeader", "GMHeaderId")
                        .WithMany("gameplayDetails")
                        .HasForeignKey("GMHeaderIdGameplayHeaderID");

                    b.HasOne("th_poker_api.Model.Player.MDUsers", "IdUser")
                        .WithMany("GameplayDetails")
                        .HasForeignKey("IdUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("th_poker_api.Model.Game.WinType", "WinTypeId")
                        .WithMany()
                        .HasForeignKey("WinTypeIdIdWinType");

                    b.Navigation("GMHeaderId");

                    b.Navigation("IdUser");

                    b.Navigation("WinTypeId");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.MDGameTypes", b =>
                {
                    b.HasOne("th_poker_api.Model.Game.MDGames", "MDGames")
                        .WithMany("MDGameTypes")
                        .HasForeignKey("MDGamesIdMDGames");

                    b.Navigation("MDGames");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.UsersLogin", b =>
                {
                    b.HasOne("th_poker_api.Model.Player.MDUsers", "IdUser")
                        .WithMany("UsersLogins")
                        .HasForeignKey("IdUserUserId");

                    b.Navigation("IdUser");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.UsersProfile", b =>
                {
                    b.HasOne("th_poker_api.Model.Player.MDUsers", "IdUser")
                        .WithMany("usersProfiles")
                        .HasForeignKey("IdUserUserId");

                    b.Navigation("IdUser");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.UsersReferal", b =>
                {
                    b.HasOne("th_poker_api.Model.Player.MDUsers", "UsersId")
                        .WithMany("UsersReferals")
                        .HasForeignKey("UsersIdUserId");

                    b.Navigation("UsersId");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.UsersToken", b =>
                {
                    b.HasOne("th_poker_api.Model.Player.MDUsers", "IdUser")
                        .WithMany("UserTokens")
                        .HasForeignKey("IdUserUserId");

                    b.Navigation("IdUser");
                });

            modelBuilder.Entity("th_poker_api.Model.Room.MDRoomList", b =>
                {
                    b.HasOne("th_poker_api.Model.Game.MDGames", "MDGamesID")
                        .WithMany("MDRoomList")
                        .HasForeignKey("MDGamesIDIdMDGames");

                    b.Navigation("MDGamesID");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.GameplayHeader", b =>
                {
                    b.Navigation("gameplayDetails");
                });

            modelBuilder.Entity("th_poker_api.Model.Game.MDGames", b =>
                {
                    b.Navigation("MDGameTypes");

                    b.Navigation("MDRoomList");
                });

            modelBuilder.Entity("th_poker_api.Model.Player.MDUsers", b =>
                {
                    b.Navigation("FriendshipAddressee");

                    b.Navigation("FriendshipRequester");

                    b.Navigation("GameplayDetails");

                    b.Navigation("UserTokens");

                    b.Navigation("UsersLogins");

                    b.Navigation("UsersReferals");

                    b.Navigation("usersProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
